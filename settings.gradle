/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

plugins {
    id 'com.gradle.develocity' version '4.1.1'
    id 'com.gradle.common-custom-user-data-gradle-plugin' version '2.3'
}

def isCI = System.getenv().containsKey('CI')
def isLocal = !isCI
def isReproducibleBuild = System.getenv('SOURCE_DATE_EPOCH') != null
if (isReproducibleBuild) {
    gradle.settingsEvaluated {
        logger.warn('*************** Remote Build Cache Disabled due to Reproducible Build ********************')
        logger.warn('Build date will be set to (SOURCE_DATE_EPOCH={})', System.getenv('SOURCE_DATE_EPOCH'))
    }
}

develocity {
    server = 'https://ge.grails.org'
    buildScan {
        tag('grails')
        tag('grails-publish-gradle-plugin')
        publishing.onlyIf { it.authenticated }
        uploadInBackground = isLocal
    }
}

buildCache {
    local { enabled = (isLocal && !isReproducibleBuild) || (isCI && isReproducibleBuild) }
    remote(develocity.buildCache) {
        push = isCI
        enabled = !isReproducibleBuild
    }
}

rootProject.name = 'grails-gradle-publish'

include('grails-publish')
findProject(':grails-publish').projectDir = file('plugin')
